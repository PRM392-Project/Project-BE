// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnapRoom.Repositories.DatabaseContext;

#nullable disable

namespace SnapRoom.Repositories.Migrations
{
    [DbContext(typeof(SnapRoomDbContext))]
    partial class SnapRoomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ApplicationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarSource")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarSource")
                        .IsUnique()
                        .HasFilter("[AvatarSource] IS NOT NULL");

                    b.HasIndex("PlanId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Style")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Design", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Furniture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Furnitures");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Image", b =>
                {
                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ImageSource");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsCart")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("DetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("InDesignQuantity")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentDesignId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DesignerId");

                    b.HasIndex("ParentDesignId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.ProductCategory", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.ProductReview", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.TrackingStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("StatusId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingStatuses");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Account", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Image", "Avatar")
                        .WithOne("Account")
                        .HasForeignKey("SnapRoom.Contract.Repositories.Entities.Account", "AvatarSource")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Avatar");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Conversation", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Customer")
                        .WithMany("CustomerConversations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Designer")
                        .WithMany("DesignerConversations")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Design", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithOne("Design")
                        .HasForeignKey("SnapRoom.Contract.Repositories.Entities.Design", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Furniture", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithOne("Furniture")
                        .HasForeignKey("SnapRoom.Contract.Repositories.Entities.Furniture", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Image", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Message", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Notification", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Order", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Designer")
                        .WithMany("DesignerOrders")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.OrderDetail", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Product", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Designer")
                        .WithMany("Products")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "ParentDesign")
                        .WithMany("Furnitures")
                        .HasForeignKey("ParentDesignId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Designer");

                    b.Navigation("ParentDesign");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.ProductCategory", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.ProductReview", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Account", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.TrackingStatus", b =>
                {
                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Order", "Order")
                        .WithMany("TrackingStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SnapRoom.Contract.Repositories.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Account", b =>
                {
                    b.Navigation("CustomerConversations");

                    b.Navigation("CustomerOrders");

                    b.Navigation("DesignerConversations");

                    b.Navigation("DesignerOrders");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("ProductReviews");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Image", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("TrackingStatuses");
                });

            modelBuilder.Entity("SnapRoom.Contract.Repositories.Entities.Product", b =>
                {
                    b.Navigation("Design");

                    b.Navigation("Furniture");

                    b.Navigation("Furnitures");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
